package com.xpg.hssy.db.pojo;

import com.xpg.hssy.db.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.xpg.hssy.db.dao.PileCollectionDao;
import com.xpg.hssy.db.dao.PileDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table PILE_COLLECTION.
 */
public class PileCollection implements java.io.Serializable {

    private Long id;
    private String userid;
    private String pileId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PileCollectionDao myDao;

    private Pile pile;
    private String pile__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public PileCollection() {
    }

    public PileCollection(Long id) {
        this.id = id;
    }

    public PileCollection(Long id, String userid, String pileId) {
        this.id = id;
        this.userid = userid;
        this.pileId = pileId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPileCollectionDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getUserid() {
        return userid;
    }

    public void setUserid(String userid) {
        this.userid = userid;
    }

    public String getPileId() {
        return pileId;
    }

    public void setPileId(String pileId) {
        this.pileId = pileId;
    }

    /** To-one relationship, resolved on first access. */
    public Pile getPile() {
        String __key = this.pileId;
        if (pile__resolvedKey == null || pile__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PileDao targetDao = daoSession.getPileDao();
            Pile pileNew = targetDao.load(__key);
            synchronized (this) {
                pile = pileNew;
            	pile__resolvedKey = __key;
            }
        }
        return pile;
    }

    public void setPile(Pile pile) {
        synchronized (this) {
            this.pile = pile;
            pileId = pile == null ? null : pile.getPileId();
            pile__resolvedKey = pileId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
