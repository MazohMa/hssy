package com.xpg.hssy.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.xpg.hssy.db.pojo.ChargeOrder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CHARGE_ORDER.
*/
public class ChargeOrderDao extends AbstractDao<ChargeOrder, String> {

    public static final String TABLENAME = "CHARGE_ORDER";

    /**
     * Properties of entity ChargeOrder.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property OrderId = new Property(0, String.class, "orderId", true, "ORDER_ID");
        public final static Property Action = new Property(1, Integer.class, "action", false, "ACTION");
        public final static Property OrderType = new Property(2, Integer.class, "orderType", false, "ORDER_TYPE");
        public final static Property ChargeEndTime = new Property(3, Long.class, "chargeEndTime", false, "CHARGE_END_TIME");
        public final static Property ChargeEnergy = new Property(4, Float.class, "chargeEnergy", false, "CHARGE_ENERGY");
        public final static Property ChargeId = new Property(5, String.class, "chargeId", false, "CHARGE_ID");
        public final static Property ChargePrice = new Property(6, Float.class, "chargePrice", false, "CHARGE_PRICE");
        public final static Property ServicePay = new Property(7, Float.class, "servicePay", false, "SERVICE_PAY");
        public final static Property ChargeStartTime = new Property(8, Long.class, "chargeStartTime", false, "CHARGE_START_TIME");
        public final static Property ConfirmTime = new Property(9, Long.class, "confirmTime", false, "CONFIRM_TIME");
        public final static Property ContactName = new Property(10, String.class, "contactName", false, "CONTACT_NAME");
        public final static Property ContactPhone = new Property(11, String.class, "contactPhone", false, "CONTACT_PHONE");
        public final static Property CreateTime = new Property(12, Long.class, "createTime", false, "CREATE_TIME");
        public final static Property EndTime = new Property(13, Long.class, "endTime", false, "END_TIME");
        public final static Property Latitude = new Property(14, Double.class, "latitude", false, "LATITUDE");
        public final static Property Location = new Property(15, String.class, "location", false, "LOCATION");
        public final static Property Longitude = new Property(16, Double.class, "longitude", false, "LONGITUDE");
        public final static Property OrderTime = new Property(17, Long.class, "orderTime", false, "ORDER_TIME");
        public final static Property OwnerId = new Property(18, String.class, "ownerId", false, "OWNER_ID");
        public final static Property PayTime = new Property(19, Long.class, "payTime", false, "PAY_TIME");
        public final static Property PileId = new Property(20, String.class, "pileId", false, "PILE_ID");
        public final static Property PileName = new Property(21, String.class, "pileName", false, "PILE_NAME");
        public final static Property PilePhone = new Property(22, String.class, "pilePhone", false, "PILE_PHONE");
        public final static Property StartTime = new Property(23, Long.class, "startTime", false, "START_TIME");
        public final static Property TenantName = new Property(24, String.class, "tenantName", false, "TENANT_NAME");
        public final static Property TenantPhone = new Property(25, String.class, "tenantPhone", false, "TENANT_PHONE");
        public final static Property Userid = new Property(26, String.class, "userid", false, "USERID");
        public final static Property EvaluateDetial = new Property(27, String.class, "evaluateDetial", false, "EVALUATE_DETIAL");
    };


    public ChargeOrderDao(DaoConfig config) {
        super(config);
    }
    
    public ChargeOrderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CHARGE_ORDER' (" + //
                "'ORDER_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: orderId
                "'ACTION' INTEGER," + // 1: action
                "'ORDER_TYPE' INTEGER," + // 2: orderType
                "'CHARGE_END_TIME' INTEGER," + // 3: chargeEndTime
                "'CHARGE_ENERGY' REAL," + // 4: chargeEnergy
                "'CHARGE_ID' TEXT," + // 5: chargeId
                "'CHARGE_PRICE' REAL," + // 6: chargePrice
                "'SERVICE_PAY' REAL," + // 7: servicePay
                "'CHARGE_START_TIME' INTEGER," + // 8: chargeStartTime
                "'CONFIRM_TIME' INTEGER," + // 9: confirmTime
                "'CONTACT_NAME' TEXT," + // 10: contactName
                "'CONTACT_PHONE' TEXT," + // 11: contactPhone
                "'CREATE_TIME' INTEGER," + // 12: createTime
                "'END_TIME' INTEGER," + // 13: endTime
                "'LATITUDE' REAL," + // 14: latitude
                "'LOCATION' TEXT," + // 15: location
                "'LONGITUDE' REAL," + // 16: longitude
                "'ORDER_TIME' INTEGER," + // 17: orderTime
                "'OWNER_ID' TEXT," + // 18: ownerId
                "'PAY_TIME' INTEGER," + // 19: payTime
                "'PILE_ID' TEXT," + // 20: pileId
                "'PILE_NAME' TEXT," + // 21: pileName
                "'PILE_PHONE' TEXT," + // 22: pilePhone
                "'START_TIME' INTEGER," + // 23: startTime
                "'TENANT_NAME' TEXT," + // 24: tenantName
                "'TENANT_PHONE' TEXT," + // 25: tenantPhone
                "'USERID' TEXT," + // 26: userid
                "'EVALUATE_DETIAL' TEXT);"); // 27: evaluateDetial
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CHARGE_ORDER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ChargeOrder entity) {
        stmt.clearBindings();
 
        String orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindString(1, orderId);
        }
 
        Integer action = entity.getAction();
        if (action != null) {
            stmt.bindLong(2, action);
        }
 
        Integer orderType = entity.getOrderType();
        if (orderType != null) {
            stmt.bindLong(3, orderType);
        }
 
        Long chargeEndTime = entity.getChargeEndTime();
        if (chargeEndTime != null) {
            stmt.bindLong(4, chargeEndTime);
        }
 
        Float chargeEnergy = entity.getChargeEnergy();
        if (chargeEnergy != null) {
            stmt.bindDouble(5, chargeEnergy);
        }
 
        String chargeId = entity.getChargeId();
        if (chargeId != null) {
            stmt.bindString(6, chargeId);
        }
 
        Float chargePrice = entity.getChargePrice();
        if (chargePrice != null) {
            stmt.bindDouble(7, chargePrice);
        }
 
        Float servicePay = entity.getServicePay();
        if (servicePay != null) {
            stmt.bindDouble(8, servicePay);
        }
 
        Long chargeStartTime = entity.getChargeStartTime();
        if (chargeStartTime != null) {
            stmt.bindLong(9, chargeStartTime);
        }
 
        Long confirmTime = entity.getConfirmTime();
        if (confirmTime != null) {
            stmt.bindLong(10, confirmTime);
        }
 
        String contactName = entity.getContactName();
        if (contactName != null) {
            stmt.bindString(11, contactName);
        }
 
        String contactPhone = entity.getContactPhone();
        if (contactPhone != null) {
            stmt.bindString(12, contactPhone);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(13, createTime);
        }
 
        Long endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindLong(14, endTime);
        }
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(15, latitude);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(16, location);
        }
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(17, longitude);
        }
 
        Long orderTime = entity.getOrderTime();
        if (orderTime != null) {
            stmt.bindLong(18, orderTime);
        }
 
        String ownerId = entity.getOwnerId();
        if (ownerId != null) {
            stmt.bindString(19, ownerId);
        }
 
        Long payTime = entity.getPayTime();
        if (payTime != null) {
            stmt.bindLong(20, payTime);
        }
 
        String pileId = entity.getPileId();
        if (pileId != null) {
            stmt.bindString(21, pileId);
        }
 
        String pileName = entity.getPileName();
        if (pileName != null) {
            stmt.bindString(22, pileName);
        }
 
        String pilePhone = entity.getPilePhone();
        if (pilePhone != null) {
            stmt.bindString(23, pilePhone);
        }
 
        Long startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindLong(24, startTime);
        }
 
        String tenantName = entity.getTenantName();
        if (tenantName != null) {
            stmt.bindString(25, tenantName);
        }
 
        String tenantPhone = entity.getTenantPhone();
        if (tenantPhone != null) {
            stmt.bindString(26, tenantPhone);
        }
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(27, userid);
        }
 
        String evaluateDetial = entity.getEvaluateDetial();
        if (evaluateDetial != null) {
            stmt.bindString(28, evaluateDetial);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ChargeOrder readEntity(Cursor cursor, int offset) {
        ChargeOrder entity = new ChargeOrder( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // orderId
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // action
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // orderType
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // chargeEndTime
            cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4), // chargeEnergy
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // chargeId
            cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6), // chargePrice
            cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7), // servicePay
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // chargeStartTime
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // confirmTime
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // contactName
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // contactPhone
            cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12), // createTime
            cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13), // endTime
            cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14), // latitude
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // location
            cursor.isNull(offset + 16) ? null : cursor.getDouble(offset + 16), // longitude
            cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17), // orderTime
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // ownerId
            cursor.isNull(offset + 19) ? null : cursor.getLong(offset + 19), // payTime
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // pileId
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // pileName
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // pilePhone
            cursor.isNull(offset + 23) ? null : cursor.getLong(offset + 23), // startTime
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // tenantName
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // tenantPhone
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // userid
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27) // evaluateDetial
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ChargeOrder entity, int offset) {
        entity.setOrderId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAction(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setOrderType(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setChargeEndTime(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setChargeEnergy(cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4));
        entity.setChargeId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setChargePrice(cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6));
        entity.setServicePay(cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7));
        entity.setChargeStartTime(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setConfirmTime(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setContactName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setContactPhone(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCreateTime(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
        entity.setEndTime(cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13));
        entity.setLatitude(cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14));
        entity.setLocation(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setLongitude(cursor.isNull(offset + 16) ? null : cursor.getDouble(offset + 16));
        entity.setOrderTime(cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17));
        entity.setOwnerId(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setPayTime(cursor.isNull(offset + 19) ? null : cursor.getLong(offset + 19));
        entity.setPileId(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setPileName(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setPilePhone(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setStartTime(cursor.isNull(offset + 23) ? null : cursor.getLong(offset + 23));
        entity.setTenantName(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setTenantPhone(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setUserid(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setEvaluateDetial(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(ChargeOrder entity, long rowId) {
        return entity.getOrderId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(ChargeOrder entity) {
        if(entity != null) {
            return entity.getOrderId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
