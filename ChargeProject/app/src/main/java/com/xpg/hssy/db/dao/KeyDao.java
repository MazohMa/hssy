package com.xpg.hssy.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.xpg.hssy.db.pojo.Key;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table KEY.
*/
public class KeyDao extends AbstractDao<Key, Long> {

    public static final String TABLENAME = "KEY";

    /**
     * Properties of entity Key.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property UserRole = new Property(2, Integer.class, "userRole", false, "USER_ROLE");
        public final static Property PileId = new Property(3, String.class, "pileId", false, "PILE_ID");
        public final static Property Key = new Property(4, String.class, "key", false, "KEY");
        public final static Property KeyType = new Property(5, Integer.class, "keyType", false, "KEY_TYPE");
        public final static Property CreateTime = new Property(6, Long.class, "createTime", false, "CREATE_TIME");
        public final static Property StartTime = new Property(7, Long.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(8, Long.class, "endTime", false, "END_TIME");
        public final static Property AddTime = new Property(9, Long.class, "addTime", false, "ADD_TIME");
        public final static Property OrderId = new Property(10, String.class, "orderId", false, "ORDER_ID");
    };


    public KeyDao(DaoConfig config) {
        super(config);
    }
    
    public KeyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'KEY' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'USER_ID' TEXT," + // 1: userId
                "'USER_ROLE' INTEGER," + // 2: userRole
                "'PILE_ID' TEXT," + // 3: pileId
                "'KEY' TEXT," + // 4: key
                "'KEY_TYPE' INTEGER," + // 5: keyType
                "'CREATE_TIME' INTEGER," + // 6: createTime
                "'START_TIME' INTEGER," + // 7: startTime
                "'END_TIME' INTEGER," + // 8: endTime
                "'ADD_TIME' INTEGER," + // 9: addTime
                "'ORDER_ID' TEXT);"); // 10: orderId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'KEY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Key entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        Integer userRole = entity.getUserRole();
        if (userRole != null) {
            stmt.bindLong(3, userRole);
        }
 
        String pileId = entity.getPileId();
        if (pileId != null) {
            stmt.bindString(4, pileId);
        }
 
        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(5, key);
        }
 
        Integer keyType = entity.getKeyType();
        if (keyType != null) {
            stmt.bindLong(6, keyType);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(7, createTime);
        }
 
        Long startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindLong(8, startTime);
        }
 
        Long endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindLong(9, endTime);
        }
 
        Long addTime = entity.getAddTime();
        if (addTime != null) {
            stmt.bindLong(10, addTime);
        }
 
        String orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindString(11, orderId);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Key readEntity(Cursor cursor, int offset) {
        Key entity = new Key( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // userRole
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pileId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // key
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // keyType
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // createTime
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // startTime
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // endTime
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // addTime
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // orderId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Key entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserRole(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setPileId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setKey(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setKeyType(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setCreateTime(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setStartTime(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setEndTime(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setAddTime(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setOrderId(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Key entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Key entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
