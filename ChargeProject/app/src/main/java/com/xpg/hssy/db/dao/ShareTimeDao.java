package com.xpg.hssy.db.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.xpg.hssy.db.pojo.ShareTime;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SHARE_TIME.
*/
public class ShareTimeDao extends AbstractDao<ShareTime, String> {

    public static final String TABLENAME = "SHARE_TIME";

    /**
     * Properties of entity ShareTime.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property StartTime = new Property(1, Long.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(2, Long.class, "endTime", false, "END_TIME");
        public final static Property PileId = new Property(3, String.class, "pileId", false, "PILE_ID");
        public final static Property Week = new Property(4, String.class, "week", false, "WEEK");
        public final static Property ServicePay = new Property(5, Float.class, "servicePay", false, "SERVICE_PAY");
    };

    private Query<ShareTime> pile_PileSharesQuery;

    public ShareTimeDao(DaoConfig config) {
        super(config);
    }
    
    public ShareTimeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SHARE_TIME' (" + //
                "'ID' TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "'START_TIME' INTEGER," + // 1: startTime
                "'END_TIME' INTEGER," + // 2: endTime
                "'PILE_ID' TEXT," + // 3: pileId
                "'WEEK' TEXT," + // 4: week
                "'SERVICE_PAY' REAL);"); // 5: servicePay
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SHARE_TIME'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ShareTime entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        Long startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindLong(2, startTime);
        }
 
        Long endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindLong(3, endTime);
        }
 
        String pileId = entity.getPileId();
        if (pileId != null) {
            stmt.bindString(4, pileId);
        }
 
        String week = entity.getWeek();
        if (week != null) {
            stmt.bindString(5, week);
        }
 
        Float servicePay = entity.getServicePay();
        if (servicePay != null) {
            stmt.bindDouble(6, servicePay);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ShareTime readEntity(Cursor cursor, int offset) {
        ShareTime entity = new ShareTime( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // startTime
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // endTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pileId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // week
            cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5) // servicePay
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ShareTime entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setStartTime(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setEndTime(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setPileId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setWeek(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setServicePay(cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(ShareTime entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(ShareTime entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "pileShares" to-many relationship of Pile. */
    public List<ShareTime> _queryPile_PileShares(String pileId) {
        synchronized (this) {
            if (pile_PileSharesQuery == null) {
                QueryBuilder<ShareTime> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.PileId.eq(null));
                pile_PileSharesQuery = queryBuilder.build();
            }
        }
        Query<ShareTime> query = pile_PileSharesQuery.forCurrentThread();
        query.setParameter(0, pileId);
        return query.list();
    }

}
