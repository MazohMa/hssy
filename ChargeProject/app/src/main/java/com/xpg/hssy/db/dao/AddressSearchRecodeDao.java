package com.xpg.hssy.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.xpg.hssy.db.pojo.AddressSearchRecode;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ADDRESS_SEARCH_RECODE.
*/
public class AddressSearchRecodeDao extends AbstractDao<AddressSearchRecode, String> {

    public static final String TABLENAME = "ADDRESS_SEARCH_RECODE";

    /**
     * Properties of entity AddressSearchRecode.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Longitude = new Property(0, Double.class, "longitude", false, "LONGITUDE");
        public final static Property Latitude = new Property(1, Double.class, "latitude", false, "LATITUDE");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property City = new Property(3, String.class, "city", false, "CITY");
        public final static Property Address = new Property(4, String.class, "address", true, "ADDRESS");
    };


    public AddressSearchRecodeDao(DaoConfig config) {
        super(config);
    }
    
    public AddressSearchRecodeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ADDRESS_SEARCH_RECODE' (" + //
                "'LONGITUDE' REAL," + // 0: longitude
                "'LATITUDE' REAL," + // 1: latitude
                "'NAME' TEXT," + // 2: name
                "'CITY' TEXT," + // 3: city
                "'ADDRESS' TEXT PRIMARY KEY NOT NULL );"); // 4: address
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ADDRESS_SEARCH_RECODE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AddressSearchRecode entity) {
        stmt.clearBindings();
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(1, longitude);
        }
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(2, latitude);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(4, city);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(5, address);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4);
    }    

    /** @inheritdoc */
    @Override
    public AddressSearchRecode readEntity(Cursor cursor, int offset) {
        AddressSearchRecode entity = new AddressSearchRecode( //
            cursor.isNull(offset + 0) ? null : cursor.getDouble(offset + 0), // longitude
            cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1), // latitude
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // city
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // address
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AddressSearchRecode entity, int offset) {
        entity.setLongitude(cursor.isNull(offset + 0) ? null : cursor.getDouble(offset + 0));
        entity.setLatitude(cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCity(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAddress(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(AddressSearchRecode entity, long rowId) {
        return entity.getAddress();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(AddressSearchRecode entity) {
        if(entity != null) {
            return entity.getAddress();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
