package com.xpg.hssy.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.xpg.hssy.db.pojo.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USER.
*/
public class UserDao extends AbstractDao<User, String> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Userid = new Property(0, String.class, "userid", true, "USERID");
        public final static Property Usertype = new Property(1, Integer.class, "usertype", false, "USERTYPE");
        public final static Property ContractFlag = new Property(2, Boolean.class, "contractFlag", false, "CONTRACT_FLAG");
        public final static Property RealName = new Property(3, String.class, "realName", false, "REAL_NAME");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Gender = new Property(5, Integer.class, "gender", false, "GENDER");
        public final static Property Phone = new Property(6, String.class, "phone", false, "PHONE");
        public final static Property AlipayName = new Property(7, String.class, "alipayName", false, "ALIPAY_NAME");
        public final static Property CreateTime = new Property(8, Long.class, "createTime", false, "CREATE_TIME");
        public final static Property Token = new Property(9, String.class, "token", false, "TOKEN");
        public final static Property RefreshToken = new Property(10, String.class, "refreshToken", false, "REFRESH_TOKEN");
        public final static Property AvatarUrl = new Property(11, String.class, "avatarUrl", false, "AVATAR_URL");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER' (" + //
                "'USERID' TEXT PRIMARY KEY NOT NULL ," + // 0: userid
                "'USERTYPE' INTEGER," + // 1: usertype
                "'CONTRACT_FLAG' INTEGER," + // 2: contractFlag
                "'REAL_NAME' TEXT," + // 3: realName
                "'NAME' TEXT," + // 4: name
                "'GENDER' INTEGER," + // 5: gender
                "'PHONE' TEXT," + // 6: phone
                "'ALIPAY_NAME' TEXT," + // 7: alipayName
                "'CREATE_TIME' INTEGER," + // 8: createTime
                "'TOKEN' TEXT," + // 9: token
                "'REFRESH_TOKEN' TEXT," + // 10: refreshToken
                "'AVATAR_URL' TEXT);"); // 11: avatarUrl
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(1, userid);
        }
 
        Integer usertype = entity.getUsertype();
        if (usertype != null) {
            stmt.bindLong(2, usertype);
        }
 
        Boolean contractFlag = entity.getContractFlag();
        if (contractFlag != null) {
            stmt.bindLong(3, contractFlag ? 1l: 0l);
        }
 
        String realName = entity.getRealName();
        if (realName != null) {
            stmt.bindString(4, realName);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        Integer gender = entity.getGender();
        if (gender != null) {
            stmt.bindLong(6, gender);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(7, phone);
        }
 
        String alipayName = entity.getAlipayName();
        if (alipayName != null) {
            stmt.bindString(8, alipayName);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(9, createTime);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(10, token);
        }
 
        String refreshToken = entity.getRefreshToken();
        if (refreshToken != null) {
            stmt.bindString(11, refreshToken);
        }
 
        String avatarUrl = entity.getAvatarUrl();
        if (avatarUrl != null) {
            stmt.bindString(12, avatarUrl);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // userid
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // usertype
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0, // contractFlag
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // realName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // gender
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // phone
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // alipayName
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // createTime
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // token
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // refreshToken
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // avatarUrl
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setUserid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUsertype(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setContractFlag(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0);
        entity.setRealName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGender(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setPhone(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAlipayName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCreateTime(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setToken(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setRefreshToken(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAvatarUrl(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(User entity, long rowId) {
        return entity.getUserid();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(User entity) {
        if(entity != null) {
            return entity.getUserid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
