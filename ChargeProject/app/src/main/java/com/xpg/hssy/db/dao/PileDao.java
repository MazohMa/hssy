package com.xpg.hssy.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.xpg.hssy.db.pojo.Pile;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PILE.
*/
public class PileDao extends AbstractDao<Pile, String> {

    public static final String TABLENAME = "PILE";

    /**
     * Properties of entity Pile.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property PileId = new Property(0, String.class, "pileId", true, "PILE_ID");
        public final static Property PileName = new Property(1, String.class, "pileName", false, "PILE_NAME");
        public final static Property Type = new Property(2, Integer.class, "type", false, "TYPE");
        public final static Property Location = new Property(3, String.class, "location", false, "LOCATION");
        public final static Property Price = new Property(4, Float.class, "price", false, "PRICE");
        public final static Property ContactName = new Property(5, String.class, "contactName", false, "CONTACT_NAME");
        public final static Property ContactPhone = new Property(6, String.class, "contactPhone", false, "CONTACT_PHONE");
        public final static Property Userid = new Property(7, String.class, "userid", false, "USERID");
        public final static Property Latitude = new Property(8, Double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(9, Double.class, "longitude", false, "LONGITUDE");
        public final static Property Altitude = new Property(10, Double.class, "altitude", false, "ALTITUDE");
        public final static Property RatedVoltage = new Property(11, Float.class, "ratedVoltage", false, "RATED_VOLTAGE");
        public final static Property RatedCurrent = new Property(12, Float.class, "ratedCurrent", false, "RATED_CURRENT");
        public final static Property Power = new Property(13, Float.class, "power", false, "POWER");
        public final static Property Auth = new Property(14, Integer.class, "auth", false, "AUTH");
        public final static Property FamilyNumber = new Property(15, Integer.class, "familyNumber", false, "FAMILY_NUMBER");
        public final static Property Favor = new Property(16, Integer.class, "favor", false, "FAVOR");
        public final static Property ShareState = new Property(17, Integer.class, "shareState", false, "SHARE_STATE");
        public final static Property Score = new Property(18, Float.class, "score", false, "SCORE");
        public final static Property AvgLevel = new Property(19, Float.class, "avgLevel", false, "AVG_LEVEL");
        public final static Property Operator = new Property(20, Integer.class, "operator", false, "OPERATOR");
        public final static Property Annotation = new Property(21, String.class, "annotation", false, "ANNOTATION");
        public final static Property PilePortrait = new Property(22, String.class, "pilePortrait", false, "PILE_PORTRAIT");
        public final static Property CoverCropImg = new Property(23, String.class, "coverCropImg", false, "COVER_CROP_IMG");
        public final static Property CoverImg = new Property(24, String.class, "coverImg", false, "COVER_IMG");
        public final static Property Desp = new Property(25, String.class, "desp", false, "DESP");
        public final static Property IsIdle = new Property(26, Integer.class, "isIdle", false, "IS_IDLE");
        public final static Property Acount = new Property(27, Integer.class, "acount", false, "ACOUNT");
        public final static Property ChargerNum = new Property(28, Integer.class, "chargerNum", false, "CHARGER_NUM");
        public final static Property GprsType = new Property(29, Integer.class, "gprsType", false, "GPRS_TYPE");
        public final static Property Factotry = new Property(30, String.class, "factotry", false, "FACTOTRY");
        public final static Property Facilities = new Property(31, String.class, "facilities", false, "FACILITIES");
        public final static Property FuncType = new Property(32, String.class, "funcType", false, "FUNC_TYPE");
        public final static Property OwnerAvatar = new Property(33, String.class, "ownerAvatar", false, "OWNER_AVATAR");
        public final static Property OwnerName = new Property(34, String.class, "ownerName", false, "OWNER_NAME");
    };

    private DaoSession daoSession;


    public PileDao(DaoConfig config) {
        super(config);
    }
    
    public PileDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PILE' (" + //
                "'PILE_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: pileId
                "'PILE_NAME' TEXT," + // 1: pileName
                "'TYPE' INTEGER," + // 2: type
                "'LOCATION' TEXT," + // 3: location
                "'PRICE' REAL," + // 4: price
                "'CONTACT_NAME' TEXT," + // 5: contactName
                "'CONTACT_PHONE' TEXT," + // 6: contactPhone
                "'USERID' TEXT," + // 7: userid
                "'LATITUDE' REAL," + // 8: latitude
                "'LONGITUDE' REAL," + // 9: longitude
                "'ALTITUDE' REAL," + // 10: altitude
                "'RATED_VOLTAGE' REAL," + // 11: ratedVoltage
                "'RATED_CURRENT' REAL," + // 12: ratedCurrent
                "'POWER' REAL," + // 13: power
                "'AUTH' INTEGER," + // 14: auth
                "'FAMILY_NUMBER' INTEGER," + // 15: familyNumber
                "'FAVOR' INTEGER," + // 16: favor
                "'SHARE_STATE' INTEGER," + // 17: shareState
                "'SCORE' REAL," + // 18: score
                "'AVG_LEVEL' REAL," + // 19: avgLevel
                "'OPERATOR' INTEGER," + // 20: operator
                "'ANNOTATION' TEXT," + // 21: annotation
                "'PILE_PORTRAIT' TEXT," + // 22: pilePortrait
                "'COVER_CROP_IMG' TEXT," + // 23: coverCropImg
                "'COVER_IMG' TEXT," + // 24: coverImg
                "'DESP' TEXT," + // 25: desp
                "'IS_IDLE' INTEGER," + // 26: isIdle
                "'ACOUNT' INTEGER," + // 27: acount
                "'CHARGER_NUM' INTEGER," + // 28: chargerNum
                "'GPRS_TYPE' INTEGER," + // 29: gprsType
                "'FACTOTRY' TEXT," + // 30: factotry
                "'FACILITIES' TEXT," + // 31: facilities
                "'FUNC_TYPE' TEXT," + // 32: funcType
                "'OWNER_AVATAR' TEXT," + // 33: ownerAvatar
                "'OWNER_NAME' TEXT);"); // 34: ownerName
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PILE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Pile entity) {
        stmt.clearBindings();
 
        String pileId = entity.getPileId();
        if (pileId != null) {
            stmt.bindString(1, pileId);
        }
 
        String pileName = entity.getPileName();
        if (pileName != null) {
            stmt.bindString(2, pileName);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(3, type);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(4, location);
        }
 
        Float price = entity.getPrice();
        if (price != null) {
            stmt.bindDouble(5, price);
        }
 
        String contactName = entity.getContactName();
        if (contactName != null) {
            stmt.bindString(6, contactName);
        }
 
        String contactPhone = entity.getContactPhone();
        if (contactPhone != null) {
            stmt.bindString(7, contactPhone);
        }
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(8, userid);
        }
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(9, latitude);
        }
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(10, longitude);
        }
 
        Double altitude = entity.getAltitude();
        if (altitude != null) {
            stmt.bindDouble(11, altitude);
        }
 
        Float ratedVoltage = entity.getRatedVoltage();
        if (ratedVoltage != null) {
            stmt.bindDouble(12, ratedVoltage);
        }
 
        Float ratedCurrent = entity.getRatedCurrent();
        if (ratedCurrent != null) {
            stmt.bindDouble(13, ratedCurrent);
        }
 
        Float power = entity.getPower();
        if (power != null) {
            stmt.bindDouble(14, power);
        }
 
        Integer auth = entity.getAuth();
        if (auth != null) {
            stmt.bindLong(15, auth);
        }
 
        Integer familyNumber = entity.getFamilyNumber();
        if (familyNumber != null) {
            stmt.bindLong(16, familyNumber);
        }
 
        Integer favor = entity.getFavor();
        if (favor != null) {
            stmt.bindLong(17, favor);
        }
 
        Integer shareState = entity.getShareState();
        if (shareState != null) {
            stmt.bindLong(18, shareState);
        }
 
        Float score = entity.getScore();
        if (score != null) {
            stmt.bindDouble(19, score);
        }
 
        Float avgLevel = entity.getAvgLevel();
        if (avgLevel != null) {
            stmt.bindDouble(20, avgLevel);
        }
 
        Integer operator = entity.getOperator();
        if (operator != null) {
            stmt.bindLong(21, operator);
        }
 
        String annotation = entity.getAnnotation();
        if (annotation != null) {
            stmt.bindString(22, annotation);
        }
 
        String pilePortrait = entity.getPilePortrait();
        if (pilePortrait != null) {
            stmt.bindString(23, pilePortrait);
        }
 
        String coverCropImg = entity.getCoverCropImg();
        if (coverCropImg != null) {
            stmt.bindString(24, coverCropImg);
        }
 
        String coverImg = entity.getCoverImg();
        if (coverImg != null) {
            stmt.bindString(25, coverImg);
        }
 
        String desp = entity.getDesp();
        if (desp != null) {
            stmt.bindString(26, desp);
        }
 
        Integer isIdle = entity.getIsIdle();
        if (isIdle != null) {
            stmt.bindLong(27, isIdle);
        }
 
        Integer acount = entity.getAcount();
        if (acount != null) {
            stmt.bindLong(28, acount);
        }
 
        Integer chargerNum = entity.getChargerNum();
        if (chargerNum != null) {
            stmt.bindLong(29, chargerNum);
        }
 
        Integer gprsType = entity.getGprsType();
        if (gprsType != null) {
            stmt.bindLong(30, gprsType);
        }
 
        String factotry = entity.getFactotry();
        if (factotry != null) {
            stmt.bindString(31, factotry);
        }
 
        String facilities = entity.getFacilities();
        if (facilities != null) {
            stmt.bindString(32, facilities);
        }
 
        String funcType = entity.getFuncType();
        if (funcType != null) {
            stmt.bindString(33, funcType);
        }
 
        String ownerAvatar = entity.getOwnerAvatar();
        if (ownerAvatar != null) {
            stmt.bindString(34, ownerAvatar);
        }
 
        String ownerName = entity.getOwnerName();
        if (ownerName != null) {
            stmt.bindString(35, ownerName);
        }
    }

    @Override
    protected void attachEntity(Pile entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Pile readEntity(Cursor cursor, int offset) {
        Pile entity = new Pile( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // pileId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // pileName
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // location
            cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4), // price
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // contactName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // contactPhone
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // userid
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // latitude
            cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9), // longitude
            cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10), // altitude
            cursor.isNull(offset + 11) ? null : cursor.getFloat(offset + 11), // ratedVoltage
            cursor.isNull(offset + 12) ? null : cursor.getFloat(offset + 12), // ratedCurrent
            cursor.isNull(offset + 13) ? null : cursor.getFloat(offset + 13), // power
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // auth
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // familyNumber
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // favor
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // shareState
            cursor.isNull(offset + 18) ? null : cursor.getFloat(offset + 18), // score
            cursor.isNull(offset + 19) ? null : cursor.getFloat(offset + 19), // avgLevel
            cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20), // operator
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // annotation
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // pilePortrait
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // coverCropImg
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // coverImg
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // desp
            cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26), // isIdle
            cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27), // acount
            cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28), // chargerNum
            cursor.isNull(offset + 29) ? null : cursor.getInt(offset + 29), // gprsType
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // factotry
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // facilities
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // funcType
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // ownerAvatar
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34) // ownerName
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Pile entity, int offset) {
        entity.setPileId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPileName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setLocation(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPrice(cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4));
        entity.setContactName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setContactPhone(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUserid(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLatitude(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setLongitude(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
        entity.setAltitude(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
        entity.setRatedVoltage(cursor.isNull(offset + 11) ? null : cursor.getFloat(offset + 11));
        entity.setRatedCurrent(cursor.isNull(offset + 12) ? null : cursor.getFloat(offset + 12));
        entity.setPower(cursor.isNull(offset + 13) ? null : cursor.getFloat(offset + 13));
        entity.setAuth(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setFamilyNumber(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setFavor(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setShareState(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setScore(cursor.isNull(offset + 18) ? null : cursor.getFloat(offset + 18));
        entity.setAvgLevel(cursor.isNull(offset + 19) ? null : cursor.getFloat(offset + 19));
        entity.setOperator(cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20));
        entity.setAnnotation(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setPilePortrait(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setCoverCropImg(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setCoverImg(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setDesp(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setIsIdle(cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26));
        entity.setAcount(cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27));
        entity.setChargerNum(cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28));
        entity.setGprsType(cursor.isNull(offset + 29) ? null : cursor.getInt(offset + 29));
        entity.setFactotry(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setFacilities(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setFuncType(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setOwnerAvatar(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setOwnerName(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Pile entity, long rowId) {
        return entity.getPileId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Pile entity) {
        if(entity != null) {
            return entity.getPileId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
