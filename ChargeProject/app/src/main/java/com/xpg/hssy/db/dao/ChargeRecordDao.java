package com.xpg.hssy.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.xpg.hssy.db.pojo.ChargeRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CHARGE_RECORD.
*/
public class ChargeRecordDao extends AbstractDao<ChargeRecord, Long> {

    public static final String TABLENAME = "CHARGE_RECORD";

    /**
     * Properties of entity ChargeRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Sequence = new Property(1, Integer.class, "sequence", false, "SEQUENCE");
        public final static Property OrderId = new Property(2, String.class, "orderId", false, "ORDER_ID");
        public final static Property Userid = new Property(3, String.class, "userid", false, "USERID");
        public final static Property UserName = new Property(4, String.class, "userName", false, "USER_NAME");
        public final static Property PhoneNo = new Property(5, String.class, "phoneNo", false, "PHONE_NO");
        public final static Property PileId = new Property(6, String.class, "pileId", false, "PILE_ID");
        public final static Property StartTime = new Property(7, Long.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(8, Long.class, "endTime", false, "END_TIME");
        public final static Property Quantity = new Property(9, Float.class, "quantity", false, "QUANTITY");
        public final static Property Receipt = new Property(10, String.class, "receipt", false, "RECEIPT");
        public final static Property ChargePrice = new Property(11, Float.class, "chargePrice", false, "CHARGE_PRICE");
        public final static Property Data = new Property(12, String.class, "data", false, "DATA");
        public final static Property Status = new Property(13, Integer.class, "status", false, "STATUS");
        public final static Property CreateTime = new Property(14, Long.class, "createTime", false, "CREATE_TIME");
    };


    public ChargeRecordDao(DaoConfig config) {
        super(config);
    }
    
    public ChargeRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CHARGE_RECORD' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'SEQUENCE' INTEGER," + // 1: sequence
                "'ORDER_ID' TEXT," + // 2: orderId
                "'USERID' TEXT," + // 3: userid
                "'USER_NAME' TEXT," + // 4: userName
                "'PHONE_NO' TEXT," + // 5: phoneNo
                "'PILE_ID' TEXT," + // 6: pileId
                "'START_TIME' INTEGER," + // 7: startTime
                "'END_TIME' INTEGER," + // 8: endTime
                "'QUANTITY' REAL," + // 9: quantity
                "'RECEIPT' TEXT," + // 10: receipt
                "'CHARGE_PRICE' REAL," + // 11: chargePrice
                "'DATA' TEXT," + // 12: data
                "'STATUS' INTEGER," + // 13: status
                "'CREATE_TIME' INTEGER);"); // 14: createTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CHARGE_RECORD'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ChargeRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer sequence = entity.getSequence();
        if (sequence != null) {
            stmt.bindLong(2, sequence);
        }
 
        String orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindString(3, orderId);
        }
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(4, userid);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(5, userName);
        }
 
        String phoneNo = entity.getPhoneNo();
        if (phoneNo != null) {
            stmt.bindString(6, phoneNo);
        }
 
        String pileId = entity.getPileId();
        if (pileId != null) {
            stmt.bindString(7, pileId);
        }
 
        Long startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindLong(8, startTime);
        }
 
        Long endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindLong(9, endTime);
        }
 
        Float quantity = entity.getQuantity();
        if (quantity != null) {
            stmt.bindDouble(10, quantity);
        }
 
        String receipt = entity.getReceipt();
        if (receipt != null) {
            stmt.bindString(11, receipt);
        }
 
        Float chargePrice = entity.getChargePrice();
        if (chargePrice != null) {
            stmt.bindDouble(12, chargePrice);
        }
 
        String data = entity.getData();
        if (data != null) {
            stmt.bindString(13, data);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(14, status);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(15, createTime);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ChargeRecord readEntity(Cursor cursor, int offset) {
        ChargeRecord entity = new ChargeRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // sequence
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // orderId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userid
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // userName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // phoneNo
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // pileId
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // startTime
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // endTime
            cursor.isNull(offset + 9) ? null : cursor.getFloat(offset + 9), // quantity
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // receipt
            cursor.isNull(offset + 11) ? null : cursor.getFloat(offset + 11), // chargePrice
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // data
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // status
            cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14) // createTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ChargeRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSequence(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setOrderId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserid(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPhoneNo(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPileId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStartTime(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setEndTime(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setQuantity(cursor.isNull(offset + 9) ? null : cursor.getFloat(offset + 9));
        entity.setReceipt(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setChargePrice(cursor.isNull(offset + 11) ? null : cursor.getFloat(offset + 11));
        entity.setData(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setStatus(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setCreateTime(cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ChargeRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ChargeRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
