package com.xpg.hssy.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.xpg.hssy.db.pojo.DistrictData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DISTRICT_DATA.
*/
public class DistrictDataDao extends AbstractDao<DistrictData, Long> {

    public static final String TABLENAME = "DISTRICT_DATA";

    /**
     * Properties of entity DistrictData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property DistrictName = new Property(1, String.class, "districtName", false, "DISTRICT_NAME");
        public final static Property DistrictPinyin = new Property(2, String.class, "districtPinyin", false, "DISTRICT_PINYIN");
        public final static Property DistrictFirstPinyin = new Property(3, String.class, "districtFirstPinyin", false, "DISTRICT_FIRST_PINYIN");
        public final static Property DistrictCode = new Property(4, String.class, "districtCode", false, "DISTRICT_CODE");
        public final static Property IsHot = new Property(5, Integer.class, "isHot", false, "IS_HOT");
        public final static Property ParentId = new Property(6, Long.class, "parentId", false, "PARENT_ID");
        public final static Property CreateTime = new Property(7, Long.class, "createTime", false, "CREATE_TIME");
    };


    public DistrictDataDao(DaoConfig config) {
        super(config);
    }
    
    public DistrictDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DISTRICT_DATA' (" + //
                "'ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'DISTRICT_NAME' TEXT," + // 1: districtName
                "'DISTRICT_PINYIN' TEXT," + // 2: districtPinyin
                "'DISTRICT_FIRST_PINYIN' TEXT," + // 3: districtFirstPinyin
                "'DISTRICT_CODE' TEXT," + // 4: districtCode
                "'IS_HOT' INTEGER," + // 5: isHot
                "'PARENT_ID' INTEGER," + // 6: parentId
                "'CREATE_TIME' INTEGER);"); // 7: createTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DISTRICT_DATA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DistrictData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String districtName = entity.getDistrictName();
        if (districtName != null) {
            stmt.bindString(2, districtName);
        }
 
        String districtPinyin = entity.getDistrictPinyin();
        if (districtPinyin != null) {
            stmt.bindString(3, districtPinyin);
        }
 
        String districtFirstPinyin = entity.getDistrictFirstPinyin();
        if (districtFirstPinyin != null) {
            stmt.bindString(4, districtFirstPinyin);
        }
 
        String districtCode = entity.getDistrictCode();
        if (districtCode != null) {
            stmt.bindString(5, districtCode);
        }
 
        Integer isHot = entity.getIsHot();
        if (isHot != null) {
            stmt.bindLong(6, isHot);
        }
 
        Long parentId = entity.getParentId();
        if (parentId != null) {
            stmt.bindLong(7, parentId);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(8, createTime);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DistrictData readEntity(Cursor cursor, int offset) {
        DistrictData entity = new DistrictData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // districtName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // districtPinyin
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // districtFirstPinyin
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // districtCode
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // isHot
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // parentId
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7) // createTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DistrictData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDistrictName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDistrictPinyin(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDistrictFirstPinyin(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDistrictCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsHot(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setParentId(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setCreateTime(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DistrictData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DistrictData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
